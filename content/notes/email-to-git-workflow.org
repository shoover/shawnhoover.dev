#+title: Posting to a Static Site by Email with GitHub Actions
#+description: A Posterous-like, serverless workflow to create plain text blog posts from emails
#+date: <2023-11-12 Sun 10:44>
#+setupfile: org.txt

In [[file:email-still-works.org][Email Still Works]] I mentioned I wrote code to set up posting by email for
this site. This post shows how that works[fn:2].

* Overview
The basic requirement is to fetch email from a dedicated mailbox and save each new
message to a post file git. I'm already using GitHub Actions for
deployment, so I chose that as a handy serverless runtime environment.

Ideally, new posts would be processed as soon as possible. Rather than tuning a cron schedule (on the order of minutes?), I deployed a Cloudflare Email Worker that pings GitHub and triggers email
ingestion via [[https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#repository_dispatch][repository_dispatch]] as soon as an email lands. I'm already using
Cloudflare for domain registration and have a couple email routes there. Email
Workers, currently in beta, are perfectly suited to a glue handler like this
(for a hobby project--I can't speak to production readiness). To make GitHub API
calls, I created a GitHub App and [[https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app-installation#using-the-octokitjs-sdk-to-authenticate-as-an-app-installation][authenticate as an app installation]] with
a private key. The one-time App/App installation/private key setup process is
reasonably well documented; setup and coding to migrate from using a personal access token to app installation[fn:3] took about an hour.[fn:4]

The result is a nice event-driven workflow. I can post from my phone--including formatted text and
images--with an easy, quick feedback loop. Within a few seconds of hitting send
in the email app, the message is processed to orgmode and pushed to a PR. From
the PR, I can preview the post in the GitHub code browser (.org renders just
like markdown) or jump over to the staging site, which will be freshly deployed
a few seconds after the PR is created. If there are any issues, I can edit in
place using GitHub web (it's unpleasant but possible on a phone). Merging the PR
deploys the post to the main site.

Here's the high level workflow:

#+CAPTION: End-to-end email ingestion diagram
[[../assets/images/notes/email-to-git-workflow/end-to-end.png]]

* GitHub Actions Code
The complete GitHub workflow code is in [[https://github.com/shoover/shawnhoover.dev/blob/main/script/ingest-email.py][ingest-email.py]]. I'll cover the high
points here.

Emails are fetched with straightforward IMAP processing.

#+begin_src python
import dkim
import email
import imaplib

imap = imaplib.IMAP4_SSL(imap_server)
imap.login(imap_username, imap_password)
imap.select(imap_folder)

status, email_ids = imap.search(None, "UNSEEN")
email_id_list = email_ids[0].split()
for email_id in email_id_list:
    # Fetch with PEEK to keep the message unread pending successful processing.
    status, email_data = imap.fetch(email_id, "(BODY.PEEK[])")
    if status != "OK":
        raise Exception(f"Fetch {email_id} failed: {status}.")

    msg_bytes = email_data[0][1]

    # Scream if a message shows up failing ARC authentication.
    if not arc_authenticated(msg_bytes):
        raise Exception(f": {sender} ({subject})")

    post = extract_post(email.message_from_bytes(msg_bytes), org_dest=notes_dest, img_dest=img_dest)

    check_in(post['subject'], notes_dest, img_dest)

    imap.store(email_id, "+FLAGS", "\Seen")

imap.logout()
#+end_src


The happy path extracts the message body from a multipart email (in theory plain
text email is handled--I didn't test it), does a little HTML cleanup, and
converts to orgmode using the venerable, amazing pandoc.

#+begin_src python
for part in msg.walk():
    # ... validate headers and content type

    if content_type == "text/html":
        html = BeautifulSoup(payload.decode(), 'html.parser')
        for br in html.find_all('br'):
            br.extract()
        content = subprocess.run(
            ["pandoc", "--from=html", "--to=org"],
            input=str(html),
            stdout=subprocess.PIPE,
            text=True,
        ).stdout
        
    # ... handle plain text
#+end_src

A separate walk (not shown) extracts image parts to disk in the GitHub runner
workspace. After rewriting image src attributes from =cid= references to
relative paths, post content is written to disk in a basic orgmode template.

#+begin_src python
image_link_base = pathlib.Path('..').joinpath(image_path.relative_to(image_path.parts[0]))
for img in images:
    org_link = f"file:{image_link_base}/{img['filename']}"
    content = content.replace(f"cid:{img['content_id']}", org_link)

# Create post file (orgmode template)
note_file_path = os.path.join(org_dest, f"{slug(subject)}.org")
with open(note_file_path, "w") as f:
    post_timestamp = pendulum.now().format('YYYY-MM-DD ddd HH:mm')
    f.write(f"""#+title: {subject}
#+date: <{post_timestamp}>
#+setupfile: org.txt

{content}""")
#+end_src

Everyday git commands commit new files to git and create a PR. Lastly, the
deploy workflow is explicitly triggered to build the branch[fn:1].

* Email Worker Code
The Email Worker validates the sender and ultimately makes one GitHub API call:

#+begin_src js
const app = new App({
	appId,
	privateKey,
});

const {
	data: { id },
} = await app.octokit.request('GET /repos/{owner}/{repo}/installation', {
	owner,
	repo,
	headers: {
		'X-GitHub-Api-Version': '2022-11-28'
	}
})

const octokit = await app.getInstallationOctokit(id);

await octokit.rest.repos.createDispatchEvent({
	owner: OWNER,
	repo: REPO,
	event_type: "email_received",
	client_payload: {},
});
#+end_src

* Conclusion
After a bit of setup, processing email to text in GitHub Actions is easy to use
and, so far, works great. With the flexibility of HTML converters and different
attachment types, the same concept could be extended to any static content
format.

* Footnotes
[fn:4] A caveat: GitHub exports private keys in PKCS#1 format, which works
fine to sign requests in nodejs. However, WebCrypto, as used in Cloudflare's worker runtime,
requires PKCS#8. I had to convert the downloaded key using openssl (see [[https://github.com/gr2m/universal-github-app-jwt#readme][here]])
before creating the secret in Cloudflare.

[fn:3] An earlier version of this note lamented the need to rotate a personal
access token every three months. I've since learned about GitHub Apps, [[https://github.com/shoover/shawnhoover.dev/commit/a3735990302fefb61f2a82d2afb34cbe6e123305#diff-e451850c449a4b52253b4ddd4e26e4b990cc11d086b2381e1fa7ea7d0405a296R48][updated the worker code]], and updated this note.
 
[fn:2] But, alas, was not itself authored by email.

[fn:1] This requirement to explicitly trigger the deploy job confused me. I
assumed the existing =push= trigger would happen automatically, and it didn't.
Once I learned GitHub does not trigger jobs from git operations made by existing
jobs, as a measure to prevent cycles, it was straightforward to make the deploy
job reusable and trigger it explicitly.
