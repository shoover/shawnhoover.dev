#+title: Calculating CDFs in Sqlite
#+description: Quick reference using window functions
#+date: <2023-10-08 Sun 21:30>
#+setupfile: org.txt

A common SQL task in customer-facing work (less often than checking a quick
[[file:postgres-histograms.org][histogram]], but it comes up) is calculating a cumulative distribution function
(CDF) to answer questions like:
1. What percentage of DB storage utilization is for data older than 12 months? 6
   months? 3 months?
2. What proportion of total message volume do the chattiest 1000 devices
   send?
3. What are the top 5 applications by logs volume? What is their percentage of
   the total?

These questions can be answered easily by dropping a couple quick formulas in
Excel, but it gets repetitive. It's nice to get quick feedback on cumulative
values automatically while iterating on the underlying query.

Here's how I calculate CDFs with sqlite window functions (as a note to myself,
because I will never remember the details).

Note: Sqlite has a =cume_dist= window function that sound promising but works
only on partition row numbers, not arbitrary expressions.

References:
- [[https://www.sqlite.org/windowfunctions.html][SQLite Window Functions]]
- [[https://brooker.co.za/blog/2022/09/02/ecdf.html][Histogram vs. eCDF]]: Marc Brooker on the usefulness of eCDFs.

* Cumulative Quantity Y by Ascending Date X
Cumulative bloomed diameter by date. Yes, I'm stretching this made up data set
beyond any sensible meaning.

#+begin_src sql
select
    date(ts) as day,
    sum(diameter) as daily_diameter,
    sum(diameter) over (rows between unbounded preceding and current row) as cumulative_diameter,
    round(sum(diameter) over (rows between unbounded preceding and current row) /
          sum(diameter) over (rows between unbounded preceding and unbounded following), 2) as cdf
from blooms
where ts > '2023-01-01'
group by date(ts)
order by ts;
#+end_src

|        day | daily_diameter | cumulative_diameter |  cdf |
|------------+----------------+---------------------+------|
| 2023-04-10 |            7.0 |                 7.0 | 0.12 |
| 2023-04-14 |            5.0 |                12.0 | 0.21 |
| 2023-04-19 |            5.0 |                17.0 |  0.3 |
| 2023-04-20 |           40.0 |                57.0 |  1.0 |

The same query, plotted with gnuplot on the command line:

#+begin_src sh
sqlite3 -csv ~/dev/test.db "select
    date(ts) as day,
    round(sum(diameter) over (rows between unbounded preceding and current row) /
          sum(diameter) over (rows between unbounded preceding and unbounded following), 3) as cdf
from blooms
where ts > '2023-01-01'
group by date(ts)
order by ts;" | gnuplot -p -e 'set datafile separator ",";\
      set term svg; set output "blooms-cdf.svg";\
      set title "Blooms Diameter CDF";\
      set xlabel ""; set ylabel "Cumulative Diameter";\
      set xdata time; set timefmt "%Y-%m-%d"; set format x "%Y-%m-%d"; set xtics rotate;\
      plot "-" using 1:2 with lines title ""' && open blooms-cdf.svg
#+end_src

#+CAPTION: Blooms CDF plot
[[../assets/images/notes/sqlite-cdf/blooms-cdf.svg]]

* Cumulative Quantity Y Ordered by Y

Cumulative bloomed diameter ordered by descending diameter. This example also
shows a named window definition and window chaining.

#+begin_src sql
select
    plant,
    diameter,
    sum(diameter) over cume as cumulative_diameter,
    round(sum(diameter) over cume /
          sum(diameter) over (diam_desc rows between unbounded preceding and unbounded following), 2) as cdf
from blooms
where ts > '2023-01-01'
window diam_desc as (order by diameter desc),
cume as (diam_desc rows between unbounded preceding and current row)
#+end_src

| plant   | diameter | cumulative_diameter |  cdf |
|---------+----------+---------------------+------|
| oak     |     40.0 |                40.0 | 0.7  |
| dogwood |      7.0 |                47.0 | 0.82 |
| tulip   |      5.0 |                52.0 | 0.91 |
| hemlock |      5.0 |                57.0 |  1.0 |

* Sample Setup
Create a database:

#+begin_src sh
sudo apt install sqlite3 gnuplot
sqlite3 test.db
#+end_src

Set up a table:

#+begin_src sql
create table blooms (
    plant text,
    location text,
    ts timestamptz,
    diameter double -- Feet
);

insert into blooms values
    ('dogwood', 'deck', '2023-04-10', 7),
    ('tulip', 'front', '2023-04-19', 5),
    ('oak', 'side', '2023-04-20', 40),
    ('hemlock', 'side', '2022-04-15', 4),
    ('hemlock', 'side', '2023-04-14', 5);
#+end_src
