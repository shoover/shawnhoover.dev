AWSTemplateFormatVersion: 2010-09-09
Description: Just a web site, hosted on CloudFront and S3

Parameters:
  SubDomain:
    Description: The part of a website address before your DomainName - e.g. www or img
    Type: String
    Default: www
    AllowedPattern: ^[^.]*$
  DomainName:
    Description: The part of a website address after your SubDomain - e.g. example.com
    Type: String
  CreateApex:
    Description: Create an Apex Alias in CloudFront distribution - yes/no
    Type: String
    Default: 'no'
    AllowedValues: ['yes','no']
  CreateDns:
    Description: Create Route53 DNS records - yes/no
    Type: String
    Default: 'no'
    AllowedValues: ['yes','no']
  HostedZoneId:
    Description: Route53 hosted zone to use for domain validation records, required if CreateDns=yes
    Type: String
    Default: 'ZZZHHHHWWWWAAA'

Conditions:
  CreateApexConfig:  !Equals
    - !Ref CreateApex
    - 'yes'
  CreateDnsConfig:  !Equals
    - !Ref CreateDns
    - 'yes'
  CreateApexDnsConfig:  !And
    - !Condition CreateApexConfig
    - !Condition CreateDnsConfig
    
Resources:
  S3BucketRoot:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref 'S3BucketLogs'
        LogFilePrefix: 'origin/'

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3BucketRoot'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub '${S3BucketRoot.Arn}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub '${SubDomain}.${DomainName}'
          - !If [ CreateApexConfig, !Ref DomainName, !Ref 'AWS::NoValue' ]
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: true
          MaxTTL: 31536000
          TargetOriginId: !Sub 'S3-${AWS::StackName}-root'
          ViewerProtocolPolicy: 'redirect-to-https'
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/403.html'
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt 'S3BucketLogs.DomainName'
          IncludeCookies: false
          Prefix: 'cdn/'
        Origins:
          - DomainName: !GetAtt S3BucketRoot.DomainName
            Id: !Sub 'S3-${AWS::StackName}-root'
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref 'Certificate'
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${SubDomain}.${DomainName}'
        
  Route53RecordSetGroup:
    Condition: CreateDnsConfig
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
      - Name: !Sub '${SubDomain}.${DomainName}'
        Type: 'A'
        AliasTarget:
          DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
          EvaluateTargetHealth: false
          # The  following HosteZoneId is always used for alias records pointing to CF.
          HostedZoneId: 'Z2FDTNDATAQYW2'

  ApexRoute53RecordSetGroup:
    Condition: CreateApexDnsConfig
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
      - Name: !Ref 'DomainName'
        Type: 'A'
        AliasTarget:
          DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
          EvaluateTargetHealth: false
          # The  following HosteZoneId is always used for alias records pointing to CF.
          HostedZoneId: 'Z2FDTNDATAQYW2'

  Certificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Sub '${SubDomain}.${DomainName}'
      SubjectAlternativeNames:
        Fn::If:
          - CreateApexConfig
          - - Ref: DomainName
          - Ref: AWS::NoValue
      ValidationMethod: DNS
      DomainValidationOptions:
        Fn::If:
          - CreateDnsConfig
          - - DomainName: !Sub '${SubDomain}.${DomainName}'
              HostedZoneId: !Ref HostedZoneId
          - Ref: AWS::NoValue

  S3BucketLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

Outputs:
  CloudFrontDomainName:
    Description: Website address
    Value: !Sub '${SubDomain}.${DomainName}'
  CloudFrontDistribution:
    Description: CloudFront distribution ID
    Value: !Ref CloudFrontDistribution
  CloudFrontDistributionDomain:
    Description: CloudFront distribution domain name
    Value: !GetAtt CloudFrontDistribution.DomainName
  DNSRecord:
    Description: DNS record to create to point your site to CloudFront
    Value: !Sub '${SubDomain}.${DomainName} CNAME ${CloudFrontDistribution.DomainName}'

  S3BucketRoot:
    Description: Website bucket
    Value: !Ref S3BucketRoot
  S3BucketLogs:
    Description: Logging bucket
    Value: !Ref S3BucketLogs
